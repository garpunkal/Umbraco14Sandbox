{"version":3,"file":"assets.js","sources":["../../../../Umbraco14Sandbox.Client/assets/src/dashboards/manifest.ts","../../../../Umbraco14Sandbox.Client/assets/src/propertyEditors/manifest.ts","../../../../Umbraco14Sandbox.Client/assets/src/sections/manifest.ts","../../../../Umbraco14Sandbox.Client/assets/src/sidebars/manifest.ts","../../../../Umbraco14Sandbox.Client/assets/src/workspaces/manifest.ts","../../../../Umbraco14Sandbox.Client/assets/src/dialogs/manifest.ts","../../../../Umbraco14Sandbox.Client/assets/src/index.ts","../../../../Umbraco14Sandbox.Client/assets/src/dashboards/dashboard.element.ts","../../../../Umbraco14Sandbox.Client/assets/src/propertyEditors/suggestions.element.ts","../../../../Umbraco14Sandbox.Client/assets/src/workspaces/context.ts","../../../../Umbraco14Sandbox.Client/assets/src/workspaces/workspace.element.ts","../../../../Umbraco14Sandbox.Client/assets/src/workspaces/views/defaultWorkspace.element.ts","../../../../Umbraco14Sandbox.Client/assets/src/workspaces/views/settingsWorkspace.element.ts","../../../../Umbraco14Sandbox.Client/assets/src/dialogs/custom-modal-token.ts","../../../../Umbraco14Sandbox.Client/assets/src/workspaces/views/dialogsWorkspace.element.ts","../../../../Umbraco14Sandbox.Client/assets/src/dialogs/custom-modal-element.ts"],"sourcesContent":["import type { ManifestDashboard } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nconst dashboards: Array<ManifestDashboard> = [\r\n    {\r\n        type: 'dashboard',\r\n        name: 'Punk.Dashboard',\r\n        alias: 'punk.dashboard',\r\n        elementName: 'punk-dashboard',\r\n        js: ()=> import('./dashboard.element.js'),\r\n        weight: -10,\r\n        meta: {\r\n            label: 'Punk Dashboard',\r\n            pathname: 'punk-dashboard'\r\n        },\r\n        conditions: [\r\n            {\r\n                alias: 'Umb.Condition.SectionAlias',\r\n                match: 'punk.section'\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\nexport const manifests = [...dashboards];   ","import type { ManifestPropertyEditorUi } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nconst propertyEditors: Array<ManifestPropertyEditorUi> = [\r\n    {\r\n        type: 'propertyEditorUi',\r\n        name: 'Punk.Suggestions',\r\n        alias: 'punk.suggestions',\r\n        elementName: 'punk-suggestions',\r\n        js: () => import('./suggestions.element.js'),\r\n        meta: {\r\n            label: \"Suggestions\",\r\n            icon: \"icon-list\",\r\n            group: \"common\",\r\n            propertyEditorSchemaAlias: \"Umbraco.Plain.String\",\r\n            settings: {\r\n                properties: [\r\n                    {\r\n                        \"alias\": \"disabled\",\r\n                        \"label\": \"Disabled\",\r\n                        \"description\": \"Disables the suggestion button\",\r\n                        \"propertyEditorUiAlias\": \"Umb.PropertyEditorUi.Toggle\"\r\n                    },\r\n                    {\r\n                        \"alias\": \"placeholder\",\r\n                        \"label\": \"Placeholder text\",\r\n                        \"description\": \"A nice placeholder description to help out our editor!\",\r\n                        \"propertyEditorUiAlias\": \"Umb.PropertyEditorUi.TextBox\"\r\n                    },\r\n                    {\r\n                        \"alias\": \"maxChars\",\r\n                        \"label\": \"Max characters allowed\",\r\n                        \"description\": \"The maximum number of allowed characters in a suggestion\",\r\n                        \"propertyEditorUiAlias\": \"Umb.PropertyEditorUi.Integer\"\r\n                    },\r\n                    {\r\n                        \"alias\": \"suggestions\",\r\n                        \"label\": \"Suggestions\",\r\n                        \"description\": \"A list of suggestions to suggest\",\r\n                        \"propertyEditorUiAlias\": \"Umb.PropertyEditorUi.TextArea\" \r\n                    }\r\n                ],\r\n                defaultData: [\r\n                    {\r\n                        \"alias\": \"disabled\",\r\n                        \"value\": true\r\n                    },\r\n                    {\r\n                        \"alias\": \"placeholder\",\r\n                        \"value\": \"Write a suggestion\"\r\n                    },\r\n                    {\r\n                        \"alias\": \"maxChars\",\r\n                        \"value\": 50\r\n                    }\r\n                ]\r\n            }\r\n        },\r\n    }\r\n]\r\n\r\nexport const manifests = [...propertyEditors];","import { ManifestSection } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nconst sectionManifest : ManifestSection = {\r\n    type: 'section',\r\n    alias: 'punk.section',\r\n    name: 'Punk section',\r\n    weight: 10,\r\n    meta: {\r\n        label: 'Punk',\r\n        pathname: 'Punk'\r\n    }   \r\n}\r\n\r\nexport const manifests = [sectionManifest];","import { ManifestMenu, ManifestMenuItem, ManifestSectionSidebarApp, } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nconst sidebarAppManifest : ManifestSectionSidebarApp = {\r\n    type: 'sectionSidebarApp',\r\n    kind: 'menuWithEntityActions',\r\n    alias: 'punk.sidebar.app',\r\n    name: 'Punk app',\r\n    meta: {\r\n        label: \"Punk\",\r\n        menu: \"punk.menu\"\r\n    },\r\n    conditions: [\r\n        {\r\n            alias: \"Umb.Condition.SectionAlias\",\r\n            match: \"punk.section\"\r\n        }\r\n    ]   \r\n};\r\nconst menuManifest: ManifestMenu = {\r\n    type: 'menu',\r\n    alias: 'punk.menu',\r\n    name: 'punk sidebar menu',\r\n    meta: {\r\n        label: 'Punk'\r\n    }\r\n}\r\n\r\nconst menuItemManifest: ManifestMenuItem = {\r\n    type: 'menuItem',\r\n    alias: 'punk.menu.item',\r\n    name: 'punk menu item',\r\n    meta: {\r\n        label: 'Punks',\r\n        icon: 'icon-umbraco',\r\n        entityType: 'punk-workspace',\r\n        menus: [\r\n            'punk.menu'\r\n        ]\r\n    }\r\n}\r\n\r\nexport const manifests = [\r\n    sidebarAppManifest,\r\n    menuManifest,\r\n    menuItemManifest\r\n];","import { ManifestModal, ManifestWorkspace, ManifestWorkspaceAction, ManifestWorkspaceContext, ManifestWorkspaceView } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nvar workspace : ManifestWorkspace = {\r\n    type: 'workspace',\r\n    alias: 'punk.workspace',\r\n    name: 'punk workspace',\r\n    js: ()=> import('./workspace.element'),   \r\n    meta: {\r\n        entityType: 'punk-workspace'\r\n    }\r\n};\r\n\r\nvar workspaceViews : Array<ManifestWorkspaceView> = [\r\n    {\r\n        type: 'workspaceView',\r\n        alias: 'punk.workspace.default',\r\n        name: 'default view',\r\n        js: () => import('./views/defaultWorkspace.element'),\r\n        weight: 300,\r\n        meta: {\r\n           icon: 'icon-alarm-clock',\r\n           pathname: 'overview',\r\n           label: 'punk'\r\n        },\r\n        conditions: [\r\n\t\t\t{\r\n\t\t\t\talias: 'Umb.Condition.WorkspaceAlias',\r\n\t\t\t\tmatch: workspace.alias\r\n\t\t\t},\r\n\t\t],    \r\n    },\r\n    {\r\n        type: 'workspaceView',\r\n        alias: 'punk.workspace.settings',\r\n        name: 'setting view',\r\n        js: ()=> import('./views/settingsWorkspace.element'),\r\n        weight: 200,\r\n        meta: {\r\n            icon: 'icon-settings',\r\n            pathname: 'settings',\r\n            label: 'settings'\r\n        },\r\n        conditions: [\r\n\t\t\t{\r\n\t\t\t\talias: 'Umb.Condition.WorkspaceAlias',\r\n\t\t\t\tmatch: workspace.alias\r\n\t\t\t},\r\n\t\t],\r\n    },\r\n    {\r\n        type: \"workspaceView\",\r\n        alias: 'punk.workspace.dialogs',\r\n        name: 'dialogs',\r\n        js: ()=> import('./views/dialogsWorkspace.element'),\r\n        weight: 50,\r\n        meta: {\r\n            icon: 'icon-app',\r\n            pathname: 'dialogs',\r\n            label: 'Dialogs'\r\n        },\r\n        conditions: [\r\n            {\r\n\t\t\t\talias: 'Umb.Condition.WorkspaceAlias',\r\n\t\t\t\tmatch: workspace.alias\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n\r\nconst context : ManifestWorkspaceContext = {\r\n    type: 'workspaceContext',\r\n    alias: 'punk.workspace.context',\r\n    name: 'punk workspace context',\r\n    js: ()=> import('./context.ts'),\r\n}\r\n\r\nconst workspaceActions: Array<ManifestWorkspaceAction> = [];\r\n\r\nconst workspaceModals : Array<ManifestModal> = [];\r\n\r\nexport const manifests = [\r\n    context, \r\n    workspace, \r\n    ...workspaceViews, \r\n    ...workspaceActions, \r\n    ...workspaceModals];","import { ManifestModal } from \"@umbraco-cms/backoffice/extension-registry\";\r\n\r\nconst modals: Array<ManifestModal> = [\r\n    {\r\n        type: 'modal',\r\n        alias: 'punk.custom.modal',\r\n        name: 'punk custom modal',\r\n        js: () => import('./custom-modal-element.ts')\r\n    }\r\n];\r\n\r\nexport const manifests = [...modals];","import { UmbEntryPointOnInit } from '@umbraco-cms/backoffice/extension-api';\r\nimport { ManifestTypes } from '@umbraco-cms/backoffice/extension-registry';\r\n\r\nimport { manifests as dashboardManifests } from './dashboards/manifest';\r\nimport { manifests as propertyEditorsManifests } from './propertyEditors/manifest';\r\nimport { manifests as sectionManifests } from './sections/manifest';\r\nimport { manifests as sidebarManifests } from './sidebars/manifest';\r\nimport { manifests as workspacesManifests } from './workspaces/manifest';\r\nimport { manifests as dialogManifests } from './dialogs/manifest';\r\n\r\nconst manifests: Array<ManifestTypes> = [\r\n    ...dashboardManifests,\r\n    ...propertyEditorsManifests,\r\n    ...sectionManifests,\r\n    ...sidebarManifests,\r\n    ...workspacesManifests,\r\n    ...dialogManifests\r\n];\r\n\r\nexport const onInit: UmbEntryPointOnInit = (_host, extensionRegistry) => {\r\n    extensionRegistry.registerMany(manifests);\r\n};","\r\nimport { type UmbCurrentUserModel, UMB_CURRENT_USER_CONTEXT } from \"@umbraco-cms/backoffice/current-user\";\r\nimport { LitElement, css, html, customElement, state, repeat, property } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { type UmbUserDetailModel, UmbUserCollectionRepository } from '@umbraco-cms/backoffice/user';\r\nimport { UserStateModel } from \"@umbraco-cms/backoffice/external/backend-api\";\r\nimport { UUIInterfaceColor, UUIInterfaceLook } from \"@umbraco-cms/backoffice/external/uui\";\r\n\r\n@customElement('punk-dashboard')\r\nexport class PunkDashboard extends UmbElementMixin(LitElement) {\r\n\r\n    @state()\r\n    private _currentUser?: UmbCurrentUserModel;\r\n\r\n    @state()\r\n    private _userData: Array<UmbUserDetailModel> = [];\r\n\r\n    #userRepository = new UmbUserCollectionRepository(this);\r\n\r\n    constructor() {\r\n        super();\r\n        this.consumeContext(UMB_CURRENT_USER_CONTEXT, (instance) => {\r\n            this._observeCurrentUser(instance);\r\n        });\r\n        this._getPagedUserData();\r\n    }\r\n\r\n    private async _observeCurrentUser(instance: typeof UMB_CURRENT_USER_CONTEXT.TYPE) {\r\n        this.observe(instance.currentUser, (currentUser) => {\r\n            this._currentUser = currentUser;\r\n        });\r\n    }\r\n    private async _getPagedUserData() {\r\n        const { data } = await this.#userRepository.requestCollection();\r\n        this._userData = data?.items ?? [];\r\n    }\r\n\r\n\r\n    @property()\r\n    title = 'Punk Dashboard'\r\n\r\n    render() {\r\n        return html`\r\n          <uui-box headline=\"hello world\">\r\n            \r\n                <h1>Welcome ${this._currentUser?.name ?? \"Unknown\"}!</h1>\r\n         \r\n                <uui-button href=\"https://garpunkal.dev\" look=\"primary\" type=\"button\" target=\"_blank\">garpunkal.dev</uui-button>\r\n\r\n                <uui-table id=\"users-wrapper\">\r\n\t\t\t\t<uui-table-row>\r\n\t\t\t\t\t<uui-table-head-cell>Name</uui-table-head-cell>\r\n\t\t\t\t\t<uui-table-head-cell>Email</uui-table-head-cell>\r\n\t\t\t\t\t<uui-table-head-cell>Status</uui-table-head-cell>\r\n\t\t\t\t</uui-table-row>\r\n\t\t\t\t${repeat(this._userData, (user) => user.unique, (user) => this._renderUser(user))}\r\n\t\t\t</uui-table>\r\n\r\n            </uui-box>\r\n        `;\r\n\r\n    }\r\n\r\n\r\n    private _renderUser(user: UmbUserDetailModel) {\r\n        if (!user) return;\r\n        const state = this.getLookAndColorFromUserState(user.state);\r\n        return html`<uui-table-row class=\"user\">\r\n                <uui-table-cell>${user.name}</uui-table-cell>\r\n                <uui-table-cell>${user.email}</uui-table-cell>\r\n                <uui-table-cell><uui-tag look=${state.look} color=${state.color}>${user.state}</uui-tag></uui-table-cell>\r\n            </uui-table-row>`;\r\n    }\r\n\r\n    getLookAndColorFromUserState = (state?: UserStateModel | null): { look: UUIInterfaceLook; color: UUIInterfaceColor } => {\r\n        switch (state) {\r\n            case UserStateModel.INACTIVE:\r\n            case UserStateModel.INVITED:\r\n                return { look: 'primary', color: 'warning' };\r\n            case UserStateModel.ACTIVE:\r\n                return { look: 'primary', color: 'positive' };\r\n            case UserStateModel.DISABLED:\r\n                return { look: 'primary', color: 'danger' };\r\n            default:\r\n                return { look: 'secondary', color: 'default' };\r\n        }\r\n    };\r\n\r\n    static styles = [\r\n        css`\r\n       :host {\r\n\t\t\tdisplay: block;\r\n\t\t\tpadding: var(--uui-size-layout-1);\r\n\t\t}\r\n\r\n\t\tuui-table-head-cell {\r\n\t\t\tfont-weight: bold;\r\n\t\t}\r\n\r\n\t\t.user:hover,\r\n\t\t.user:focus {\r\n\t\t\tcursor: pointer;\r\n\t\t\tbackground-color: var(--uui-color-surface-alt);\r\n\t\t}\r\n    `\r\n    ];\r\n}\r\n\r\n\r\nexport default PunkDashboard;\r\n\r\ndeclare global {\r\n    interface HtmlElementTagNameMap {\r\n        'punk-dashboard': PunkDashboard\r\n    }\r\n}","import { UmbElementMixin } from '@umbraco-cms/backoffice/element-api';\r\nimport { UmbPropertyEditorUiElement } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { css, customElement, html, ifDefined, LitElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationDefaultData } from \"@umbraco-cms/backoffice/notification\";\r\nimport { type UmbPropertyEditorConfigCollection, UmbPropertyValueChangeEvent } from '@umbraco-cms/backoffice/property-editor';\r\nimport { UMB_MODAL_MANAGER_CONTEXT, UMB_CONFIRM_MODAL,} from \"@umbraco-cms/backoffice/modal\";\r\n\r\n@customElement('punk-suggestions')\r\nexport default class PunkSuggestionsPropertyEditorUIElement extends UmbElementMixin((LitElement)) implements UmbPropertyEditorUiElement {\r\n\r\n    _modalManagerContext?: typeof UMB_MODAL_MANAGER_CONTEXT.TYPE;\r\n    _notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n    constructor() {\r\n        super();\r\n        this.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (instance) => {\r\n            this._modalManagerContext = instance;\r\n        });\r\n\r\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (instance) => {\r\n            this._notificationContext = instance;\r\n        });\r\n    }\r\n\r\n    @state()\r\n    private _disabled?: boolean;\r\n\r\n    @state()\r\n    private _placeholder?: string;\r\n\r\n    @state()\r\n    private _maxChars?: number;\r\n\r\n    @state()\r\n    private _suggestions?: Array<string> = [];\r\n\r\n    @property({ type: String })\r\n    public value = \"\";\r\n\r\n    @property({ attribute: false })\r\n    public set config(config: UmbPropertyEditorConfigCollection) {\r\n        this._disabled = config.getValueByAlias(\"disabled\");\r\n        this._placeholder = config.getValueByAlias(\"placeholder\");\r\n        this._maxChars = config.getValueByAlias(\"maxChars\");\r\n        this._suggestions = config.getValueByAlias<string>(\"suggestions\")?.split('\\n') || [];\r\n    }\r\n\r\n    #onInput(e: InputEvent) {\r\n        this.value = (e.target as HTMLInputElement).value;\r\n        this.#dispatchChangeEvent();\r\n    }\r\n\r\n    #dispatchChangeEvent() {\r\n        this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n    }\r\n\r\n    #onSuggestion() {\r\n        const randomIndex = (this._suggestions!.length * Math.random()) | 0;\r\n        this.value = this._suggestions![randomIndex];\r\n        this.#dispatchChangeEvent();\r\n    }\r\n\r\n    #onTextTrim() {\r\n        if (!this._maxChars) return;\r\n        if (!this.value || (this.value as string).length <= this._maxChars) {\r\n            const data: UmbNotificationDefaultData = {\r\n                message: `Nothing to trim!`,\r\n            };\r\n            this._notificationContext?.peek(\"danger\", { data });\r\n            return;\r\n        }\r\n\r\n        const trimmed = (this.value as string).substring(0, this._maxChars);\r\n        const modalHandler = this._modalManagerContext?.open(this, UMB_CONFIRM_MODAL,\r\n            {\r\n                data: {\r\n                    headline: `Trim text`,\r\n                    content: `Do you want to trim the text to \"${trimmed}\"?`,\r\n                    color: \"danger\",\r\n                    confirmLabel: \"Trim\",\r\n                }\r\n            }\r\n        );\r\n        modalHandler?.onSubmit().then(() => {\r\n            this.value = trimmed;\r\n            this.#dispatchChangeEvent();\r\n            const data: UmbNotificationDefaultData = {\r\n                headline: `Text trimmed`,\r\n                message: `You trimmed the text!`,\r\n            };\r\n            this._notificationContext?.peek(\"positive\", { data });\r\n        }, null);\r\n\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n         <uui-input\r\n        id=\"suggestion-input\"\r\n        class=\"element\"\r\n        label=\"text input\"\r\n        placeholder=${ifDefined(this._placeholder)}\r\n        maxlength=${ifDefined(this._maxChars)}\r\n        .value=${this.value || \"\"}\r\n        @input=${this.#onInput}\r\n      >\r\n      </uui-input>\r\n      <div id=\"wrapper\">\r\n        <uui-button\r\n          id=\"suggestion-button\"\r\n          class=\"element\"\r\n          look=\"primary\"\r\n          label=\"give me suggestions\"\r\n          ?disabled=${this._disabled}\r\n          @click=${this.#onSuggestion}\r\n        >\r\n          Give me suggestions!\r\n        </uui-button>\r\n        <uui-button\r\n                id=\"suggestion-trimmer\"\r\n                class=\"element\"\r\n                look=\"outline\"\r\n                label=\"Trim text\"\r\n                @click=${this.#onTextTrim}\r\n                >\r\n                Trim text\r\n                </uui-button>\r\n      </div>\r\n        `;\r\n    }\r\n\r\n    static styles = [\r\n        css`\r\n          #wrapper {\r\n            margin-top: 10px;\r\n            display: flex;\r\n            gap: 10px;\r\n          }\r\n          .element {\r\n            width: 100%;\r\n          }\r\n        `,\r\n    ];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'punk-suggestions': PunkSuggestionsPropertyEditorUIElement;\r\n    }\r\n}","import { UmbControllerBase } from \"@umbraco-cms/backoffice/class-api\";\r\nimport { UmbContextToken } from \"@umbraco-cms/backoffice/context-api\";\r\nimport { UmbControllerHostElement } from \"@umbraco-cms/backoffice/controller-api\";\r\nimport { UMB_WORKSPACE_CONTEXT, type UmbWorkspaceContextInterface } from '@umbraco-cms/backoffice/workspace';\r\n\r\n\r\nexport class PunkWorkspaceContext extends UmbControllerBase implements UmbWorkspaceContextInterface {\r\n    public readonly workspaceAlias: string = 'punk.workspace';\r\n\r\n    constructor(host:UmbControllerHostElement) {\r\n        super(host);\r\n        this.provideContext(UMB_WORKSPACE_CONTEXT, this);\r\n        this.provideContext(TIME_WORKSPACE_CONTEXT, this);\r\n    }\r\n\r\n    getEntityType(): string {\r\n        return 'punk-workspace';\r\n    }\r\n\r\n    getUnique(): string | undefined {\r\n        return undefined;\r\n    }\r\n}\r\n\r\nexport default PunkWorkspaceContext;\r\n\r\nexport const TIME_WORKSPACE_CONTEXT  = new UmbContextToken<PunkWorkspaceContext>(\r\n    PunkWorkspaceContext.name,\r\n);","import { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { LitElement, html, customElement, css } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport TimeWorkspaceContext from \"./context.ts\";\r\n\r\n@customElement('punk-workspace-root')\r\nexport class TimeWorkspaceElement extends UmbElementMixin(LitElement) {\r\n    #workspaceContext = new TimeWorkspaceContext(this);\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        this.#workspaceContext._host;\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n        \t<umb-workspace-editor headline=\"Punk\" alias=\"punk.workspace\" .enforceNoFooter=${true}>\r\n            </umb-workspace-editor>\r\n        `;\r\n    }\r\n\r\n    static styles = css`\r\n        uui-box {\r\n            display: block;\r\n            margin: 20px;\r\n        }\r\n    `;\r\n}\r\n\r\nexport default TimeWorkspaceElement;\r\n\r\n\r\ndeclare global {\r\n\tinterface HTMLElementTagNameMap {\r\n\t\t'punk-workspace-root': TimeWorkspaceElement\r\n\t}\r\n}","import { LitElement, css, customElement, html, state } from \"@umbraco-cms/backoffice/external/lit\";\r\n\r\n@customElement('punk-workspace-default-view')\r\nexport class PunkDefaultWorkspaceElement extends LitElement {\r\n\r\n    @state()\r\n    text? : string = 'punk text goes here';\r\n\r\n    #onTextChange(e : InputEvent ) {\r\n        this.text = (e.target as HTMLInputElement).value;\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout header-transparent header-fit-height>\r\n                <uui-box headline=\"default view\">\r\n                    <umb-property-layout\r\n                        label=\"property\"\r\n                        description=\"property description\">\r\n                        <div slot=\"editor\">\r\n                            <uui-input \r\n                                slot=\"editor\"\r\n                                type=\"text\"\r\n                                @change=${this.#onTextChange}\r\n                                .value=${this.text}></uui-input>\r\n                        </div>\r\n                    </umb-property-layout>\r\n\r\n                    <em>[${this.text}]</em>\r\n                </uui-box>\r\n            </umb-body-layout>\r\n\r\n        `\r\n    };\r\n\r\n    static styles = css`\r\n        uui-input {\r\n            width: 100%;\r\n            --uui-button-border-radius: 0;\r\n        }\r\n    `\r\n}\r\n\r\nexport default PunkDefaultWorkspaceElement;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'punk-workspace-default-view': PunkDefaultWorkspaceElement\r\n    }\r\n}","import { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { LitElement, customElement, html, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UMB_PROPERTY_DATASET_CONTEXT } from \"@umbraco-cms/backoffice/property\";\r\n\r\n@customElement('punk-workspace-settings-view')\r\nexport class PunkSettingsWorkspaceElement extends UmbElementMixin(LitElement) {\r\n    \r\n    constructor() {\r\n        super();\r\n\r\n        this.consumeContext(UMB_PROPERTY_DATASET_CONTEXT, async (context) => {\r\n\r\n            this.observe(\r\n                await context.propertyValueByAlias('textProperty'),\r\n                (value) => {\r\n                    console.log(value);\r\n                },\r\n                'observetextProperty',\r\n            );\r\n        });\r\n   \r\n    }\r\n\r\n\r\n    @state()\r\n    setting = 'Hello';\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout header-transparent header-fit-height>\r\n                <uui-box headline=\"settings view\">\r\n\r\n                    Something...\r\n\r\n                    <umb-property\r\n                        label=\"Icon picker\"\r\n                        description=\"pick an icon\"\r\n                        alias=\"setting\"\r\n                        property-editor-ui-alias=\"Umb.PropertyEditorUi.TextBox\"></umb-property>\r\n\r\n                        <pre>${this.setting}</pre>\r\n                </uui-box>\r\n            </umb-body-layout>\r\n        `\r\n    }\r\n\r\n}\r\n\r\nexport default PunkSettingsWorkspaceElement;\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'punk-workspace-settings-view': PunkSettingsWorkspaceElement\r\n    }\r\n}","import { UmbModalToken } from \"@umbraco-cms/backoffice/modal\";\r\n\r\nexport interface PunkCustomModalData {\r\n    headline: string;\r\n    content: string;\r\n}\r\n\r\nexport interface PunkCustomModalValue {\r\n    content: string \r\n}\r\n\r\nexport const TIME_CUSTOM_MODAL = new UmbModalToken<PunkCustomModalData, PunkCustomModalValue>(\r\n    \"punk.custom.modal\",\r\n    {\r\n        modal: {\r\n            type: 'sidebar',\r\n            size: 'medium'\r\n        }\r\n    }\r\n);","import { UMB_BLOCK_CATALOGUE_MODAL } from \"@umbraco-cms/backoffice/block\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { LitElement, css, customElement, html, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { //https://apidocs.umbraco.com/v14/ui-api/modules/packages_core_modal.html\r\n    UMB_CODE_EDITOR_MODAL, \r\n    UMB_CONFIRM_MODAL,\r\n    UMB_ICON_PICKER_MODAL,\r\n    UMB_MODAL_MANAGER_CONTEXT, \r\n    UmbModalManagerContext,\r\n    UmbModalToken } from \"@umbraco-cms/backoffice/modal\";\r\nimport { extractUmbColorVariable } from \"@umbraco-cms/backoffice/resources\";\r\nimport { TIME_CUSTOM_MODAL } from \"../../dialogs/custom-modal-token\";\r\n\r\n@customElement(\"dialog-examples-view\")\r\nexport class PunkDialogExamplesElement extends UmbElementMixin(LitElement) {\r\n\r\n    private _modalContext?: UmbModalManagerContext;\r\n\r\n    constructor() {\r\n        super();\r\n        this.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (_instance) => {\r\n            this._modalContext = _instance;\r\n        });\r\n    }\r\n\r\n    @state()\r\n    icon = '';\r\n\r\n    @state()\r\n    color = ''; \r\n\r\n\r\n    async _OpenCustomModal() {\r\n\r\n        const customContext = this._modalContext?.open(this, TIME_CUSTOM_MODAL, {\r\n            data: {\r\n                headline: 'A Custom modal',\r\n                content: 'Some content for the custom modal'\r\n            }\r\n        });\r\n\r\n        const data = await customContext?.onSubmit();\r\n\r\n        if (!data) return;\r\n\r\n        console.log('data', data);\r\n    }\r\n    \r\n    async _OpenIconPicker() {\r\n\r\n        const modal = UMB_ICON_PICKER_MODAL;\r\n\r\n        const pickerContext = this._modalContext?.open(this, modal);\r\n\r\n        const data = await pickerContext?.onSubmit();\r\n        if (!data) return;\r\n\r\n        console.log(data);\r\n\r\n        if (data.color) {\r\n            this.color = data.color as string;\r\n        }\r\n        this.icon = data.icon as string;\r\n    }\r\n\r\n    modal_names = [\r\n        {name: 'Icon Picker', value: UMB_ICON_PICKER_MODAL},\r\n        // {name: 'Data Type Picker', value: UMB_DATA_TYPE_PICKER_MODAL },\r\n        {name: 'Block catalog', value: UMB_BLOCK_CATALOGUE_MODAL }, \r\n        // {name: 'Workspace', value: UMB_WORKSPACE_MODAL},\r\n        // {name: 'Document Type picker', value: UMB_DOCUMENT_TYPE_PICKER_MODAL},\r\n        {name: 'Code editor', value: UMB_CODE_EDITOR_MODAL}\r\n        // {name: 'template picker', value: UMB_TEMPLATE_PICKER_MODAL},\r\n        // {name: 'dictionary item picker', value: UMB_DICTIONARY_ITEM_PICKER_MODAL },\r\n        // {name: 'Partial view picker', value: UMB_PARTIAL_VIEW_PICKER_MODAL},\r\n        // {name: 'Media tree picker', value: UMB_ITEM_PICKER_MODAL}\r\n    ];\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout header-transparent header-fit-height>\r\n                <uui-box headline=\"Dialog Examples\">\r\n                    <div class=\"picker\">\r\n                        <div>\r\n                            <uui-icon name=\"${this.icon}\" style=\"color:var(${extractUmbColorVariable(this.color)})\"></uui-icon>\r\n                            <pre>${this.icon} ${this.color}</pre>\r\n                        </div>\r\n                        <div>\r\n                            <uui-button look=\"primary\"\r\n                                        color=\"default\"\r\n                                        label=\"Pick an icon\"\r\n                                        @click=${this._OpenIconPicker}></uui-button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <uui-button look=\"secondary\"\r\n                                    color=\"positive\"\r\n                                    label=\"custom dialog\"\r\n                                    @click=${this._OpenCustomModal}></uui-button>\r\n                    </div>\r\n                </uui-box>\r\n\r\n                \r\n\r\n                <uui-box>\r\n                    ${this.render_modals()}\r\n                </uui-box>\r\n\r\n                <uui-box>\r\n                    <uui-button \r\n                        color=\"danger\" \r\n                        look=\"primary\"\r\n                        label=\"Confirm?\" @click=${this.openConfirm}></uui-button>\r\n                </uui-box>\r\n            </umb-body-layout>        \r\n        `;\r\n    };\r\n\r\n    async openConfirm() {\r\n\r\n        const confirmContext= this._modalContext?.open(this, UMB_CONFIRM_MODAL, {\r\n            data: {\r\n                headline: `Are you sure`,\r\n                content: 'Do you really want to do the thing here?',\r\n                confirmLabel: 'Confim',\r\n                color: 'danger',\r\n            }\r\n        });\r\n\r\n        confirmContext?.onSubmit()\r\n            .then(()=> {\r\n                console.log('confirm');\r\n            })\r\n            .catch(() => {\r\n                console.log('cancel');\r\n            });\r\n    }\r\n\r\n    async openModal(name : UmbModalToken<object, unknown>) {\r\n\r\n        const modalContext = this._modalContext?.open(this, name);\r\n        const data = await modalContext?.onSubmit();\r\n\r\n        console.log(data);\r\n    }\r\n\r\n    render_modals() {\r\n\r\n        const buttons = this.modal_names.map((m) => {\r\n\r\n            return html`\r\n                <uui-button .label=${m.name}\r\n                color=\"default\" look=\"secondary\"\r\n                @click=${() => this.openModal(m.value)}></uui-button>\r\n            `;\r\n\r\n        });\r\n\r\n        return html`\r\n            <div class=\"buttons\">\r\n                ${buttons}\r\n            </div>\r\n        `\r\n\r\n    }\r\n\r\n    static styles = css`\r\n\r\n        uui-icon {\r\n            font-size: 25pt;\r\n        }\r\n\r\n        .picker {\r\n            display: flex;\r\n        }\r\n        .buttons {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n        }\r\n\r\n        .buttons > uui-button {\r\n            margin: 10px ;\r\n        }\r\n\r\n    `;\r\n\r\n}\r\n\r\nexport default PunkDialogExamplesElement;\r\n\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'punk-dialog-examples-view': PunkDialogExamplesElement\r\n    }\r\n}","import { customElement, html, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { UmbModalBaseElement } from \"@umbraco-cms/backoffice/modal\";\r\nimport { PunkCustomModalData, PunkCustomModalValue } from \"./custom-modal-token\";\r\nimport { UUIInputEvent } from \"@umbraco-cms/backoffice/external/uui\";\r\n\r\n@customElement('punk-custom-modal')\r\nexport class PunkCustomModalElement extends \r\n    UmbModalBaseElement<PunkCustomModalData, PunkCustomModalValue> \r\n{\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    connectedCallback(): void {\r\n        super.connectedCallback();\r\n        this.updateValue({content: this.data?.content});       \r\n    }\r\n\r\n    @state()\r\n    content: string = '';\r\n\r\n    #handleConfirm() {\r\n\t\tthis.value = { content: this.data?.content ?? ''} ;\r\n\t\tthis.modalContext?.submit();\r\n\t}\r\n\r\n\t#handleCancel() {\r\n\t\tthis.modalContext?.reject();\r\n\t}\r\n\r\n    #contentChange(event: UUIInputEvent) {\r\n        this.updateValue({content: event.target.value.toString()});\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout .headline=${this.data?.headline ?? 'Custom dialog'}>\r\n                <uui-box>\r\n                    <uui-textarea label=\"content\" \r\n                        rows=10\r\n                        .value=${this.data?.content}\r\n                        @input=${this.#contentChange}>\r\n                    </uui-textarea>\r\n                </uui-box>\r\n                <uui-box>\r\n                    <h2>Return Value</h2>\r\n                    <pre>${this.value?.content}</pre>\r\n                </uui-box>\r\n\r\n                <div slot=\"actions\">\r\n                        <uui-button id=\"cancel\" label=\"Cancel\" @click=\"${this.#handleCancel}\">Cancel</uui-button>\r\n                        <uui-button\r\n                            id=\"submit\"\r\n                            color='positive'\r\n                            look=\"primary\"\r\n                            label=\"Submit\"\r\n                            @click=${this.#handleConfirm}></uui-button>\r\n            </div>\r\n            </umb-body-layout>\r\n        `;\r\n    }\r\n    \r\n}\r\n\r\nexport default PunkCustomModalElement;"],"names":["dashboards","dashboard_element","manifests","propertyEditors","suggestions_element","sectionManifest","sidebarAppManifest","menuManifest","menuItemManifest","workspace","workspace_element","workspaceViews","defaultWorkspace_element","settingsWorkspace_element","dialogsWorkspace_element","context","workspaceActions","workspaceModals","modals","customModalElement","dashboardManifests","propertyEditorsManifests","sectionManifests","sidebarManifests","workspacesManifests","dialogManifests","onInit","_host","extensionRegistry","_userRepository","PunkDashboard","UmbElementMixin","LitElement","__privateAdd","UmbUserCollectionRepository","state","UserStateModel","UMB_CURRENT_USER_CONTEXT","instance","currentUser","data","__privateGet","html","_a","repeat","user","css","__decorateClass","property","customElement","PunkDashboard$1","_PunkSuggestionsPropertyEditorUIElement_instances","onInput_fn","dispatchChangeEvent_fn","onSuggestion_fn","onTextTrim_fn","PunkSuggestionsPropertyEditorUIElement","UMB_MODAL_MANAGER_CONTEXT","UMB_NOTIFICATION_CONTEXT","config","ifDefined","__privateMethod","UmbPropertyValueChangeEvent","randomIndex","trimmed","modalHandler","_b","UMB_CONFIRM_MODAL","PunkWorkspaceContext","UmbControllerBase","host","UMB_WORKSPACE_CONTEXT","TIME_WORKSPACE_CONTEXT","UmbContextToken","_workspaceContext","TimeWorkspaceElement","TimeWorkspaceContext","TimeWorkspaceElement$1","_PunkDefaultWorkspaceElement_instances","onTextChange_fn","PunkDefaultWorkspaceElement","PunkDefaultWorkspaceElement$1","PunkSettingsWorkspaceElement","UMB_PROPERTY_DATASET_CONTEXT","value","PunkSettingsWorkspaceElement$1","TIME_CUSTOM_MODAL","UmbModalToken","PunkDialogExamplesElement","UMB_ICON_PICKER_MODAL","UMB_BLOCK_CATALOGUE_MODAL","UMB_CODE_EDITOR_MODAL","_instance","customContext","modal","pickerContext","extractUmbColorVariable","confirmContext","name","modalContext","buttons","m","PunkDialogExamplesElement$1","_PunkCustomModalElement_instances","handleConfirm_fn","handleCancel_fn","contentChange_fn","PunkCustomModalElement","UmbModalBaseElement","_c","event","PunkCustomModalElement$1"],"mappings":"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"}