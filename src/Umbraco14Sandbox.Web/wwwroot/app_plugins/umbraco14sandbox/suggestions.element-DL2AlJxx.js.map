{"version":3,"file":"suggestions.element-DL2AlJxx.js","sources":["../../../../Umbraco14Sandbox.Client/assets/src/propertyEditors/suggestions.element.ts"],"sourcesContent":["import { UmbElementMixin } from '@umbraco-cms/backoffice/element-api';\r\nimport { UmbPropertyEditorUiElement } from '@umbraco-cms/backoffice/extension-registry';\r\nimport { css, customElement, html, ifDefined, LitElement, property, state } from '@umbraco-cms/backoffice/external/lit';\r\nimport { UMB_NOTIFICATION_CONTEXT, UmbNotificationDefaultData } from \"@umbraco-cms/backoffice/notification\";\r\nimport { type UmbPropertyEditorConfigCollection, UmbPropertyValueChangeEvent } from '@umbraco-cms/backoffice/property-editor';\r\nimport { UMB_MODAL_MANAGER_CONTEXT, UMB_CONFIRM_MODAL,} from \"@umbraco-cms/backoffice/modal\";\r\n\r\n@customElement('punk-suggestions')\r\nexport default class PunkSuggestionsPropertyEditorUIElement extends UmbElementMixin((LitElement)) implements UmbPropertyEditorUiElement {\r\n\r\n    _modalManagerContext?: typeof UMB_MODAL_MANAGER_CONTEXT.TYPE;\r\n    _notificationContext?: typeof UMB_NOTIFICATION_CONTEXT.TYPE;\r\n\r\n\r\n    constructor() {\r\n        super();\r\n        this.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (instance) => {\r\n            this._modalManagerContext = instance;\r\n        });\r\n\r\n        this.consumeContext(UMB_NOTIFICATION_CONTEXT, (instance) => {\r\n            this._notificationContext = instance;\r\n        });\r\n    }\r\n\r\n    @state()\r\n    private _disabled?: boolean;\r\n\r\n    @state()\r\n    private _placeholder?: string;\r\n\r\n    @state()\r\n    private _maxChars?: number;\r\n\r\n    @state()\r\n    private _suggestions?: Array<string> = [];\r\n\r\n    @property({ type: String })\r\n    public value = \"\";\r\n\r\n    @property({ attribute: false })\r\n    public set config(config: UmbPropertyEditorConfigCollection) {\r\n        this._disabled = config.getValueByAlias(\"disabled\");\r\n        this._placeholder = config.getValueByAlias(\"placeholder\");\r\n        this._maxChars = config.getValueByAlias(\"maxChars\");\r\n        this._suggestions = config.getValueByAlias<string>(\"suggestions\")?.split('\\n') || [];\r\n    }\r\n\r\n    #onInput(e: InputEvent) {\r\n        this.value = (e.target as HTMLInputElement).value;\r\n        this.#dispatchChangeEvent();\r\n    }\r\n\r\n    #dispatchChangeEvent() {\r\n        this.dispatchEvent(new UmbPropertyValueChangeEvent());\r\n    }\r\n\r\n    #onSuggestion() {\r\n        const randomIndex = (this._suggestions!.length * Math.random()) | 0;\r\n        this.value = this._suggestions![randomIndex];\r\n        this.#dispatchChangeEvent();\r\n    }\r\n\r\n    #onTextTrim() {\r\n        if (!this._maxChars) return;\r\n        if (!this.value || (this.value as string).length <= this._maxChars) {\r\n            const data: UmbNotificationDefaultData = {\r\n                message: `Nothing to trim!`,\r\n            };\r\n            this._notificationContext?.peek(\"danger\", { data });\r\n            return;\r\n        }\r\n\r\n        const trimmed = (this.value as string).substring(0, this._maxChars);\r\n        const modalHandler = this._modalManagerContext?.open(this, UMB_CONFIRM_MODAL,\r\n            {\r\n                data: {\r\n                    headline: `Trim text`,\r\n                    content: `Do you want to trim the text to \"${trimmed}\"?`,\r\n                    color: \"danger\",\r\n                    confirmLabel: \"Trim\",\r\n                }\r\n            }\r\n        );\r\n        modalHandler?.onSubmit().then(() => {\r\n            this.value = trimmed;\r\n            this.#dispatchChangeEvent();\r\n            const data: UmbNotificationDefaultData = {\r\n                headline: `Text trimmed`,\r\n                message: `You trimmed the text!`,\r\n            };\r\n            this._notificationContext?.peek(\"positive\", { data });\r\n        }, null);\r\n\r\n    }\r\n\r\n    render() {\r\n        return html`\r\n         <uui-input\r\n        id=\"suggestion-input\"\r\n        class=\"element\"\r\n        label=\"text input\"\r\n        placeholder=${ifDefined(this._placeholder)}\r\n        maxlength=${ifDefined(this._maxChars)}\r\n        .value=${this.value || \"\"}\r\n        @input=${this.#onInput}\r\n      >\r\n      </uui-input>\r\n      <div id=\"wrapper\">\r\n        <uui-button\r\n          id=\"suggestion-button\"\r\n          class=\"element\"\r\n          look=\"primary\"\r\n          label=\"give me suggestions\"\r\n          ?disabled=${this._disabled}\r\n          @click=${this.#onSuggestion}\r\n        >\r\n          Give me suggestions!\r\n        </uui-button>\r\n        <uui-button\r\n                id=\"suggestion-trimmer\"\r\n                class=\"element\"\r\n                look=\"outline\"\r\n                label=\"Trim text\"\r\n                @click=${this.#onTextTrim}\r\n                >\r\n                Trim text\r\n                </uui-button>\r\n      </div>\r\n        `;\r\n    }\r\n\r\n    static styles = [\r\n        css`\r\n          #wrapper {\r\n            margin-top: 10px;\r\n            display: flex;\r\n            gap: 10px;\r\n          }\r\n          .element {\r\n            width: 100%;\r\n          }\r\n        `,\r\n    ];\r\n}\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'punk-suggestions': PunkSuggestionsPropertyEditorUIElement;\r\n    }\r\n}"],"names":["_PunkSuggestionsPropertyEditorUIElement_instances","onInput_fn","dispatchChangeEvent_fn","onSuggestion_fn","onTextTrim_fn","PunkSuggestionsPropertyEditorUIElement","UmbElementMixin","LitElement","__privateAdd","UMB_MODAL_MANAGER_CONTEXT","instance","UMB_NOTIFICATION_CONTEXT","config","_a","html","ifDefined","__privateMethod","e","UmbPropertyValueChangeEvent","randomIndex","data","trimmed","modalHandler","_b","UMB_CONFIRM_MODAL","css","__decorateClass","state","property","customElement"],"mappings":"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"}