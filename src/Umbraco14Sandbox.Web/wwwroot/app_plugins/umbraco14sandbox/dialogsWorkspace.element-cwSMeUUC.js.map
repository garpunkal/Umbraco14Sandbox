{"version":3,"file":"dialogsWorkspace.element-cwSMeUUC.js","sources":["../../../../Umbraco14Sandbox.Client/assets/src/dialogs/custom-modal-token.ts","../../../../Umbraco14Sandbox.Client/assets/src/workspaces/views/dialogsWorkspace.element.ts"],"sourcesContent":["import { UmbModalToken } from \"@umbraco-cms/backoffice/modal\";\r\n\r\nexport interface PunkCustomModalData {\r\n    headline: string;\r\n    content: string;\r\n}\r\n\r\nexport interface PunkCustomModalValue {\r\n    content: string \r\n}\r\n\r\nexport const TIME_CUSTOM_MODAL = new UmbModalToken<PunkCustomModalData, PunkCustomModalValue>(\r\n    \"punk.custom.modal\",\r\n    {\r\n        modal: {\r\n            type: 'sidebar',\r\n            size: 'medium'\r\n        }\r\n    }\r\n);","import { UMB_BLOCK_CATALOGUE_MODAL } from \"@umbraco-cms/backoffice/block\";\r\nimport { UmbElementMixin } from \"@umbraco-cms/backoffice/element-api\";\r\nimport { LitElement, css, customElement, html, state } from \"@umbraco-cms/backoffice/external/lit\";\r\nimport { \r\n    UMB_CODE_EDITOR_MODAL, \r\n    UMB_CONFIRM_MODAL,\r\n    // UMB_DATA_TYPE_PICKER_MODAL,\r\n    // UMB_DICTIONARY_ITEM_PICKER_MODAL,\r\n    // UMB_DOCUMENT_TYPE_PICKER_MODAL,\r\n    UMB_ICON_PICKER_MODAL,\r\n    UMB_ITEM_PICKER_MODAL,\r\n    UMB_MODAL_MANAGER_CONTEXT, \r\n    // UMB_PARTIAL_VIEW_PICKER_MODAL,\r\n    // UMB_TEMPLATE_PICKER_MODAL,\r\n    UMB_WORKSPACE_MODAL,\r\n    UmbModalManagerContext,\r\n    UmbModalToken } from \"@umbraco-cms/backoffice/modal\";\r\nimport { extractUmbColorVariable } from \"@umbraco-cms/backoffice/resources\";\r\nimport { TIME_CUSTOM_MODAL } from \"../../dialogs/custom-modal-token\";\r\n\r\n@customElement(\"dialog-examples-view\")\r\nexport class PunkDialogExamplesElement extends UmbElementMixin(LitElement) {\r\n\r\n    private _modalContext?: UmbModalManagerContext;\r\n\r\n    constructor() {\r\n        super();\r\n        this.consumeContext(UMB_MODAL_MANAGER_CONTEXT, (_instance) => {\r\n            this._modalContext = _instance;\r\n        });\r\n    }\r\n\r\n    @state()\r\n    icon = '';\r\n\r\n    @state()\r\n    color = ''; \r\n\r\n\r\n    async _OpenCustomModal() {\r\n\r\n        const customContext = this._modalContext?.open(this, TIME_CUSTOM_MODAL, {\r\n            data: {\r\n                headline: 'A Custom modal',\r\n                content: 'Some content for the custom modal'\r\n            }\r\n        });\r\n\r\n        const data = await customContext?.onSubmit();\r\n\r\n        if (!data) return;\r\n\r\n        console.log('data', data);\r\n    }\r\n    \r\n    async _OpenIconPicker() {\r\n\r\n        const modal = UMB_ICON_PICKER_MODAL;\r\n\r\n        const pickerContext = this._modalContext?.open(this, modal);\r\n\r\n        const data = await pickerContext?.onSubmit();\r\n        if (!data) return;\r\n\r\n        console.log(data);\r\n\r\n        if (data.color) {\r\n            this.color = data.color as string;\r\n        }\r\n        this.icon = data.icon as string;\r\n    }\r\n\r\n    modal_names = [\r\n        {name: 'Icon Picker', value: UMB_ICON_PICKER_MODAL},\r\n        // {name: 'Data Type Picker', value: UMB_DATA_TYPE_PICKER_MODAL },\r\n        {name: 'Block cataloug', value: UMB_BLOCK_CATALOGUE_MODAL }, \r\n        {name: 'Workspace', value: UMB_WORKSPACE_MODAL},\r\n        // {name: 'Document Type picker', value: UMB_DOCUMENT_TYPE_PICKER_MODAL},\r\n        {name: 'Code editor', value: UMB_CODE_EDITOR_MODAL},\r\n        // {name: 'template picker', value: UMB_TEMPLATE_PICKER_MODAL},\r\n        // {name: 'dictionary item picker', value: UMB_DICTIONARY_ITEM_PICKER_MODAL },\r\n        // {name: 'Partial view picker', value: UMB_PARTIAL_VIEW_PICKER_MODAL},\r\n        {name: 'Media tree picker', value: UMB_ITEM_PICKER_MODAL}];\r\n\r\n\r\n    render() {\r\n        return html`\r\n            <umb-body-layout header-transparent header-fit-height>\r\n                <uui-box headline=\"Dialog Examples\">\r\n                    <div class=\"picker\">\r\n                        <div>\r\n                            <uui-icon name=\"${this.icon}\" style=\"color:var(${extractUmbColorVariable(this.color)})\"></uui-icon>\r\n                            <pre>${this.icon} ${this.color}</pre>\r\n                        </div>\r\n                        <div>\r\n                            <uui-button look=\"primary\"\r\n                                        color=\"default\"\r\n                                        label=\"Pick an icon\"\r\n                                        @click=${this._OpenIconPicker}></uui-button>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <uui-button look=\"secondary\"\r\n                                    color=\"positive\"\r\n                                    label=\"custom dialog\"\r\n                                    @click=${this._OpenCustomModal}></uui-button>\r\n                    </div>\r\n                </uui-box>\r\n\r\n                \r\n\r\n                <uui-box>\r\n                    ${this.render_modals()}\r\n                </uui-box>\r\n\r\n                <uui-box>\r\n                    <uui-button \r\n                        color=\"danger\" \r\n                        look=\"primary\"\r\n                        label=\"Confirm?\" @click=${this.openConfirm}></uui-button>\r\n                </uui-box>\r\n            </umb-body-layout>        \r\n        `;\r\n    };\r\n\r\n    async openConfirm() {\r\n\r\n        const confirmContext= this._modalContext?.open(this, UMB_CONFIRM_MODAL, {\r\n            data: {\r\n                headline: `Are you sure`,\r\n                content: 'Do you really want to do the thing here?',\r\n                confirmLabel: 'Confim',\r\n                color: 'danger',\r\n            }\r\n        });\r\n\r\n        confirmContext?.onSubmit()\r\n            .then(()=> {\r\n                console.log('confirm');\r\n            })\r\n            .catch(() => {\r\n                console.log('cancel');\r\n            });\r\n    }\r\n\r\n    async openModal(name : UmbModalToken<object, unknown>) {\r\n\r\n        const modalContext = this._modalContext?.open(this, name);\r\n        const data = await modalContext?.onSubmit();\r\n\r\n        console.log(data);\r\n    }\r\n\r\n    render_modals() {\r\n\r\n        const buttons = this.modal_names.map((m) => {\r\n\r\n            return html`\r\n                <uui-button .label=${m.name}\r\n                color=\"default\" look=\"secondary\"\r\n                @click=${() => this.openModal(m.value)}></uui-button>\r\n            `;\r\n\r\n        });\r\n\r\n        return html`\r\n            <div class=\"buttons\">\r\n                ${buttons}\r\n            </div>\r\n        `\r\n\r\n    }\r\n\r\n    static styles = css`\r\n\r\n        uui-icon {\r\n            font-size: 25pt;\r\n        }\r\n\r\n        .picker {\r\n            display: flex;\r\n        }\r\n        .buttons {\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n        }\r\n\r\n        .buttons > uui-button {\r\n            margin: 10px ;\r\n        }\r\n\r\n    `;\r\n\r\n}\r\n\r\nexport default PunkDialogExamplesElement;\r\n\r\n\r\ndeclare global {\r\n    interface HTMLElementTagNameMap {\r\n        'punk-dialog-examples-view': PunkDialogExamplesElement\r\n    }\r\n}"],"names":["TIME_CUSTOM_MODAL","UmbModalToken","PunkDialogExamplesElement","UmbElementMixin","LitElement","UMB_ICON_PICKER_MODAL","UMB_BLOCK_CATALOGUE_MODAL","UMB_WORKSPACE_MODAL","UMB_CODE_EDITOR_MODAL","UMB_ITEM_PICKER_MODAL","UMB_MODAL_MANAGER_CONTEXT","_instance","customContext","_a","data","modal","pickerContext","html","extractUmbColorVariable","confirmContext","UMB_CONFIRM_MODAL","name","modalContext","buttons","m","css","__decorateClass","state","customElement","PunkDialogExamplesElement$1"],"mappings":"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"}